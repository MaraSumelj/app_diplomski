rails generate controller Users new

rails generate model User name:string email:string

rails new diploma_app -d mysql

rails generate controller StaticPages home help

****StaticPages ---> view-home.html.erb i metoda u static_pages_controler i routes.rb podesiti

rails console --sandbox -->za igranje s bazom 

rails generate migration add_index_to_users_email ----+  def change za uniqueness password

rails generate migration add_password_digest_to_users password_digest:string
	•The ability to save a securely hashed password_digest attribute to the
	database
	• A pair of virtual attributes 18 ( password and password_confirma-
	tion ), including presence validations upon object creation and a valida-
	tion requiring that they match
	• An authenticate method that returns the user when the password is
	correct (and false otherwise)


If for any reason something went wrong, you can always reset the database as follows:
	1. Quit the console.
	2. Run $ rm -f development.sqlite3 at the command line to remove the database. (We’ll learn a more elegant method for doing this in Chapter 7.)
	3. Re-run the migrations using $ bundle exec rake db:migrate .
	4. Restart the console.

User.create(:name => "Mara Sumelj", :email => "marasu1.math@pmf.hr",
:password => "123456789", :password_confirmation => "123456789", :admin =>true)

User.create(:name => "Ana", :email => "marasu3.math@pmf.hr",
:password => "123456789", :password_confirmation => "123456789", :admin =>true, :activated => true)

When submitting the signup form developed in this chapter, the name, email
address, and password get sent over the network, and hence are vulnerable to
intercept. This is a potentially serious security flaw in our application, and
the way to fix it is to use Secure Sockets Layer (SSL) 11 to encrypt all relevant
information before it leaves the local browser. Although we could use SSL
on just the signup page, it’s actually easier to implement it site-wide, which
has the additional benefits of securing user login (Chapter 8) and making our
application immune to a critical session hijacking vulnerability

Puma HTTP server that is capable of handling a large number of incoming requests.

Rails comes with three standard environments: development , test ,
and production .

This places a temporary cookie on the user’s browser containing an encrypted
version of the user’s id, which allows us to retrieve the id on subsequent pages
using session[:user_id] . In contrast to the persistent cookie created by the
cookies method (Section 8.4), the temporary cookie created by the session
method expires immediately whrails generate model Micropost content:text user:references pages:referencesen the browser is closed.



rails generate migration add_remember_digest_to_users remember_digest:string


The urlsafe_base64 method from the SecureRandom module in the Ruby
standard library fits the bill: 15 it returns a random string of length 22 composed
of the characters A–Z, a–z, 0–9, “-”, and “_” (for a total of 64 possibilities, thus
“base64”)



rails generate model Micropost content:text user:references pages:references

Micropost.create(:content => "prvi post", :user_id => 10,
:page_id => 3)

